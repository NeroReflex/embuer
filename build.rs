use std::env;
use std::fs::File;
use std::io::Write;
use std::path::PathBuf;

fn main() {
    // Generate C header file
    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_path = PathBuf::from(out_dir).join("../embuer.h");
    let _ = std::fs::create_dir_all(dest_path.parent().unwrap());

    let header = generate_header();

    let mut file = File::create(&dest_path).unwrap();
    file.write_all(header.as_bytes()).unwrap();

    println!("cargo:rerun-if-changed=build.rs");
    println!("cargo:rerun-if-changed=src/ffi.rs");
}

fn generate_header() -> String {
    r#"/**
 * Embuer C Library
 * 
 * Auto-generated from Rust source code.
 * DO NOT EDIT THIS FILE MANUALLY - it will be overwritten.
 * 
 * C interface for interacting with the Embuer update service.
 */

#ifndef EMBUER_H
#define EMBUER_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>

/**
 * Opaque handle to the Embuer client
 */
typedef struct embuer_client_t embuer_client_t;

/**
 * Status callback function type
 * 
 * Parameters:
 * - status: Current status string (see possible values below)
 * - details: Status details string
 * - progress: Progress value (0-100, or -1 if N/A)
 * - user_data: User-provided data pointer
 * 
 * Possible status values:
 * - "Idle": No update in progress
 * - "Checking": Checking for updates
 * - "Clearing": Clearing old deployments before installation
 * - "Downloading": Downloading update (progress will be 0-100 if size is known)
 * - "Installing": Installing update (progress will be 0-100)
 * - "AwaitingConfirmation": Update downloaded, awaiting user confirmation
 * - "Completed": Update completed successfully (details will show deployment name)
 * - "Failed": Update failed (details will contain error message)
 */
typedef void (*StatusCallback)(const char* status, const char* details, int progress, void* user_data);

/**
 * Error codes
 */
#define EMBUER_OK                    0   /* Success */
#define EMBUER_ERR_NULL_PTR         -1   /* Null pointer passed */
#define EMBUER_ERR_CONNECTION       -2   /* Connection error */
#define EMBUER_ERR_DBUS             -3   /* D-Bus error */
#define EMBUER_ERR_INVALID_STRING   -4   /* Invalid string encoding */
#define EMBUER_ERR_RUNTIME          -5   /* Runtime error */
#define EMBUER_ERR_NO_PENDING_UPDATE -6   /* No pending update awaiting confirmation */

/**
 * Initialize a new Embuer client
 * 
 * Returns:
 * - Pointer to client on success
 * - NULL on error
 */
embuer_client_t* embuer_client_new(void);

/**
 * Free an Embuer client
 * 
 * Parameters:
 * - client: Client handle to free
 */
void embuer_client_free(embuer_client_t* client);

/**
 * Get the boot deployment information
 * 
 * This returns both the subvolume ID and deployment name of the currently 
 * running deployment.
 * 
 * Parameters:
 * - client: Client handle
 * - boot_id_out: Pointer to receive boot ID
 * - boot_name_out: Pointer to receive boot name string (must be freed with embuer_free_string)
 * 
 * Returns:
 * - EMBUER_OK on success
 * - Error code on failure
 */
int embuer_get_boot_info(
    embuer_client_t* client,
    uint64_t* boot_id_out,
    char** boot_name_out
);

/**
 * Get the current update status
 * 
 * Parameters:
 * - client: Client handle
 * - status_out: Pointer to receive status string (must be freed with embuer_free_string)
 * - details_out: Pointer to receive details string (must be freed with embuer_free_string)
 * - progress_out: Pointer to receive progress value (0-100, or -1 if N/A)
 * 
 * Returns:
 * - EMBUER_OK on success
 * - Error code on failure
 */
int embuer_get_status(
    embuer_client_t* client,
    char** status_out,
    char** details_out,
    int* progress_out
);

/**
 * Install an update from a file
 * 
 * Parameters:
 * - client: Client handle
 * - file_path: Path to the update file
 * - result_out: Pointer to receive result message (must be freed with embuer_free_string)
 * 
 * Returns:
 * - EMBUER_OK on success
 * - Error code on failure
 */
int embuer_install_from_file(
    embuer_client_t* client,
    const char* file_path,
    char** result_out
);

/**
 * Install an update from a URL
 * 
 * Parameters:
 * - client: Client handle
 * - url: URL to download the update from
 * - result_out: Pointer to receive result message (must be freed with embuer_free_string)
 * 
 * Returns:
 * - EMBUER_OK on success
 * - Error code on failure
 */
int embuer_install_from_url(
    embuer_client_t* client,
    const char* url,
    char** result_out
);

/**
 * Free a string allocated by the library
 * 
 * Parameters:
 * - s: String to free (can be NULL)
 */
void embuer_free_string(char* s);

/**
 * Get the pending update awaiting confirmation
 * 
 * Parameters:
 * - client: Client handle
 * - version_out: Pointer to receive version string (must be freed with embuer_free_string)
 * - changelog_out: Pointer to receive changelog string (must be freed with embuer_free_string)
 * - source_out: Pointer to receive source string (must be freed with embuer_free_string)
 * 
 * Returns:
 * - EMBUER_OK on success
 * - EMBUER_ERR_NO_PENDING_UPDATE if no update is pending
 * - Other error code on failure
 */
int embuer_get_pending_update(
    embuer_client_t* client,
    char** version_out,
    char** changelog_out,
    char** source_out
);

/**
 * Confirm or reject the pending update
 * 
 * Parameters:
 * - client: Client handle
 * - accepted: Non-zero (1) to accept and install, zero (0) to reject
 * - result_out: Pointer to receive result message (must be freed with embuer_free_string)
 * 
 * Returns:
 * - EMBUER_OK on success
 * - Error code on failure
 */
int embuer_confirm_update(
    embuer_client_t* client,
    int accepted,
    char** result_out
);

/**
 * Watch for status updates (blocking call)
 * 
 * This function will block and call the callback whenever the status changes.
 * 
 * Parameters:
 * - client: Client handle
 * - callback: Function to call on status updates
 * - user_data: User data to pass to the callback (can be NULL)
 * 
 * Returns:
 * - EMBUER_OK on success
 * - Error code on failure
 */
int embuer_watch_status(
    embuer_client_t* client,
    StatusCallback callback,
    void* user_data
);

#ifdef __cplusplus
}
#endif

#endif /* EMBUER_H */
"#.to_string()
}
